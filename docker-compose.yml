name: music-admin

services:
  # Servicio de base de datos MySQL
  mysql:
    image: mysql:8.0
    container_name: music_admin_mysql
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - music_admin_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio de MongoDB (para canciones)
  mongodb:
    image: mongo:6.0
    container_name: music_admin_mongodb
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - music_admin_network
    healthcheck:
      test: mongosh --eval 'db.adminCommand("ping")' --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Servicio de backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: music_admin_backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: mysql+pymysql://root:${MYSQL_ROOT_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      MONGODB_URI: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
    ports:
      - "8000:8000"
    networks:
      - music_admin_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: music_admin_frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - music_admin_network

networks:
  music_admin_network:
    driver: bridge

volumes:
  mysql_data:
  mongodb_data:
